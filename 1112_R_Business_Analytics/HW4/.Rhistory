point <- function() {
return (sum(sample(1:6,2)))
}
point()
if_win <- function() {
first_point <- point()
if (first_point == 7 || first_point == 11) {
return (TRUE)
} else if (first_point == 2 || first_point == 3 || first_point == 12) {
return (FALSE)
} else {
target <- first_point
retry_point <- 0
while (retry_point != 7 && retry_point != target) {
retry_point <- point()
}
if (retry_point == target) {
return (TRUE)
} else if (retry_point == 7) {
return (FALSE)
}
}
}
if_win()
expected_value(0.5, 10)
expected_value <- function(probability_of_winning, bet_size) {
return (probability_of_winning*bet_size - (1-probability_of_winning)*bet_size)
}
expected_value(0.5, 10)
expected_value <- function(probability_of_winning, bet_size) {
return (probability_of_winning*bet_size - (1-probability_of_winning)*bet_size)
}
expected_value(0.5, 10)
expected_value <- function(probability_of_winning, bet_size) {
return (probability_of_winning*bet_size - (1-probability_of_winning)*bet_size)
}
expected_value(0.6, 10)
# 1.最後需交出一個 function 叫 craps_game ，
#   該function有兩個輸入：num_simulations (the number of simulations to run)
#   和 bet_size (the size of the bet for each game)。function裡為模擬此賭博遊戲的輸贏。
# craps_game <- function(num_simulations, bet_size) { }
# 2.此賭博遊戲為，用sample()去模擬擲兩個骰子。加總擲出的兩個骰子數字，為點數和。
point <- function() {
return (sum(sample(1:6,2)))
}
point()
# 3.如果第一次點數和為 7 或 11，玩家勝，贏得 bet size 。
#   若點數和為 2、3 或 12，玩家輸，輸了 -1 x bet size。
#   如果點數和為其他點數，記錄第一次的點數和，然後繼續擲骰，
#   直至點數和等於第一次擲出的點數和，玩家勝，贏得 bet size。
#   若在這之前擲出了點數和為 7，玩家輸，輸了 -1 x bet size。
if_win <- function() {
first_point <- point()
if (first_point == 7 || first_point == 11) {
return (TRUE)
} else if (first_point == 2 || first_point == 3 || first_point == 12) {
return (FALSE)
} else {
target <- first_point
retry_point <- 0
while (retry_point != 7 && retry_point != target) {
retry_point <- point()
}
if (retry_point == target) {
return (TRUE)
} else if (retry_point == 7) {
return (FALSE)
}
}
}
if_win()
# 4.計算遊戲的期望值
#   expected value = (probability of winning x bet size) + (probability of losing x bet size).
expected_value <- function(probability_of_winning, bet_size) {
return (probability_of_winning*bet_size - (1-probability_of_winning)*bet_size)
}
expected_value(0.6, 10)
# 5.craps_game function 輸出（Return） 遊戲的期望值。
# 提示：先寫玩一次的function，贏為TRUE，輸為FALSE，輸出該結果。
#       再放進craps_game重複多次後，計算輸贏次數，獲得輸贏機率。
craps_game <- function(num_simulations, bet_size) {
win_count <- 0
for (i in c(1:num_simulations)) {
if (if_win()) {
win_count <- win_count + 1
}
}
probability_of_winning <- win_count/num_simulations
return(expected_value(probability_of_winning, bet_size))
}
craps_game(1000, 10)
setwd("C:\\Users\\ASUS\\Desktop\\五234 R\\HW4") #放你的路徑
financialData <- read.csv("financialdata.csv")
data = financialData[,-1]
data = financialData[,-1]
# 變成矩陣
M = cor(data)
data$op_profit_growth_rate <- as.numeric(data$op_profit_growth_rate)
data$current_ratio <- as.numeric(data$current_ratio)
data$quick_rartio <- as.numeric(data$quick_rartio)
# 變成矩陣
M = cor(data)
View(M)
library(reshape2)
melted_cormat <- melt(M)
head(melted_cormat)
library(ggplot2)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
install.packages("stats")
library(stats)
pca<- prcomp(data, center = TRUE, scale = TRUE)
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
library(stats)
pca<- prcomp(data, center = TRUE, scale = TRUE)
financialData
#Q0 匯入要用到的資料和套件 並確認檔案內容
setwd("C:\\Users\\ASUS\\Desktop\\五234 R\\HW4") #放你的路徑
financialData <- read.csv("financialdata.csv")
financialData
# 把第一個變數id刪掉
data = financialData[,-1]
data$op_profit_growth_rate <- as.numeric(data$op_profit_growth_rate)
data$current_ratio <- as.numeric(data$current_ratio)
data$quick_rartio <- as.numeric(data$quick_rartio)
# 處理na（用平均值代替）
mean_col1 <- mean(data[, 11], na.rm = T)  # column 1 的平均數(na.rm = T 忽略遺失值)
na_c1rows <- is.na(data[, 11])           # column 1 中，有遺失值存在的資料(回傳TRUE/FALSE)
mean_col2 <- mean(data[, 14], na.rm = T) # column 3
na_c2rows <- is.na(data[, 14])
mean_col3 <- mean(data[, 15], na.rm = T) # column 3
na_c3rows <- is.na(data[, 15])
# 用 mean( column 1 ) ，填補第一欄位的遺漏值
data[na_c1rows, 11] <- mean_col1
data[na_c2rows, 14] <- mean_col2
data[na_c3rows, 15] <- mean_col3
# 變成矩陣
M = cor(data)
# 畫熱點圖
library(reshape2)
melted_cormat <- melt(M)
head(melted_cormat)
library(ggplot2)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
# 資料financialdata.csv 有163間公司的財務指標。
# 1. 以PCA或SPCA分析，找出每個主成份能解釋多少變異？
# 大概需要多少個PC來解釋這筆資料？
# install.packages("stats")
library(stats)
pca<- prcomp(data, center = TRUE, scale = TRUE)
# 2. 找出前三個主成份分別重點變數為何並解釋。
# 3. 找出適合投資的公司。
# (不需指出是哪間公司，只需依第一主成份結果說明，
#   例如：適合投資資產報酬率高的公司)
pca<- prcomp(data, center = TRUE, scale = TRUE)
names(pca) #sdev=std. deviation, rotation=coefficient主成份的係數矩陣
summary(pca)
plot(pca) #Variation	explained
pca<- prcomp(data, center = TRUE, scale = TRUE)
names(pca) #sdev=std. deviation, rotation=coefficient主成份的係數矩陣
summary(pca)
plot(pca) #Variation	explained
screeplot(pca) #same as plot(pca)
plot(pca, type="line")
abline(h=1, col="blue") #Kaiser eigenvalue-greater-than-one rule, choose pc1~pc5 by Kaiser
summary(pca)
pca$rotation
#visualize
ggplot(melt(pca$rotation[,1:3]), aes(Var2, Var1)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient2(low = "firebrick4", high = "steelblue",
mid = "white", midpoint = 0) +
guides(fill=guide_legend(title="Coefficient")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
axis.title = element_blank())
## scree plot: variance
screeplot(pca) #same as plot(pca)
plot(pca, type="line")
abline(h=0.8, col="blue") #Kaiser eigenvalue-greater-than-one rule, choose pc1~pc5 by Kaiser
summary(pca)
setwd("C:\\Users\\ASUS\\Desktop\\五234 R\\HW4") #放你的路徑
financialData <- read.csv("financialdata.csv")
financialData
# 把第一個變數id刪掉
data = financialData[,-1]
data$op_profit_growth_rate <- as.numeric(data$op_profit_growth_rate)
data$current_ratio <- as.numeric(data$current_ratio)
data$quick_rartio <- as.numeric(data$quick_rartio)
setwd("C:\\Users\\ASUS\\Desktop\\五234 R\\HW4") #放你的路徑
financialData <- read.csv("financialdata.csv")
financialData
# 把第一個變數id刪掉
data = financialData[,-1]
data$op_profit_growth_rate <- as.numeric(data$op_profit_growth_rate)
data$current_ratio <- as.numeric(data$current_ratio)
data$quick_rartio <- as.numeric(data$quick_rartio)
# 處理na（用平均值代替）
mean_col1 <- mean(data[, 11], na.rm = T)  # column 1 的平均數(na.rm = T 忽略遺失值)
na_c1rows <- is.na(data[, 11])           # column 1 中，有遺失值存在的資料(回傳TRUE/FALSE)
mean_col2 <- mean(data[, 14], na.rm = T) # column 3
na_c2rows <- is.na(data[, 14])
mean_col3 <- mean(data[, 15], na.rm = T) # column 3
na_c3rows <- is.na(data[, 15])
# 用 mean( column 1 ) ，填補第一欄位的遺漏值
data[na_c1rows, 11] <- mean_col1
data[na_c2rows, 14] <- mean_col2
data[na_c3rows, 15] <- mean_col3
# 變成矩陣
M = cor(data)
# 畫熱點圖
library(reshape2)
melted_cormat <- melt(M)
head(melted_cormat)
# 畫熱點圖
library(reshape2)
melted_cormat <- melt(M)
head(melted_cormat)
library(ggplot2)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
library(stats)
pca<- prcomp(data, center = TRUE, scale = TRUE)
names(pca) #sdev=std. deviation, rotation=coefficient主成份的係數矩陣
summary(pca)
plot(pca) #Variation	explained
screeplot(pca) #same as plot(pca)
plot(pca, type="line")
abline(h=0.8, col="blue") #Kaiser eigenvalue-greater-than-one rule, choose pc1~pc5 by Kaiser
summary(pca)
pca$rotation
#visualize
ggplot(melt(pca$rotation), aes(Var2, Var1)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient2(low = "firebrick4", high = "steelblue",
mid = "white", midpoint = 0) +
guides(fill=guide_legend(title="Coefficient")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
axis.title = element_blank())
## Rotation matrix: Loadings are the percent of variance explained by the variable
pca$rotation
#visualize
ggplot(melt(pca$rotation[,1:3]), aes(Var2, Var1)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient2(low = "firebrick4", high = "steelblue",
mid = "white", midpoint = 0) +
guides(fill=guide_legend(title="Coefficient")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
axis.title = element_blank())
